name: Build Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Dump env
        run: env | sort
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Create artifacts directory
        run: mkdir artifacts
      - name: Set env
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: true
      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url
      - name: Save version number to artifact
        run: echo "${{ env.VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts
  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [macos-x86, linux-x86, linux-arm, win-msvc]
        include:
          - build: macos-x86
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: linux-x86
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: linux-arm
            os: ubuntu-18.04
            rust: nightly
            target: aarch64-unknown-linux-gnu
          - build: win-msvc
            os: windows-2019
            rust: nightly
            target: x86_64-pc-windows-msvc
    steps:
      - name: Install Tasks
        uses: Arduino/actions/setup-taskfile@master
        with:
          version: "3"

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install linux depdencies
        if: matrix.build == 'linux-x86'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends musl-tools

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Use Cross
        run: |
          cargo install cross

      - name: Build release binary
        run: task prod-release TARGET=${{ matrix.target }}

      - name: Strip release binary (arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v $PWD/target:/target:Z rustembedded/cross:${{ matrix.target }} aarch64-linux-gnu-strip /target/${{ matrix.target}}/release/brrrr

      - name: Strip release binary (x86)
        if: matrix.build == 'linux-x86' || matrix.build == 'macos-x86'
        run: strip "target/${{ matrix.target }}/release/brrrr"

      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Prepare for Upload
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "RELEASE_UPLOAD_URL=${release_upload_url}" >> $GITHUB_ENV

          release_version="$(cat artifacts/release-version)"
          echo "RELEASE_VERSION=${release_version}" >> $GITHUB_ENV

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
              target_path="target/${{ matrix.target }}/release/brrrr.exe"
              asset_name="brrrr-${release_version}-${{ matrix.target }}.exe"
          else
              target_path="target/${{ matrix.target }}/release/brrrr"
              asset_name="brrrr-${release_version}-${{ matrix.target }}"
          fi

          echo "TARGET_PATH=${target_path}" >> $GITHUB_ENV
          echo "ASSET_NAME=${asset_name}" >> $GITHUB_ENV
          env | sort

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.TARGET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream
